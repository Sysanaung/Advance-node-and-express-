const express = require('express');
const bodyParser = require('body-parser');
const fccTesting = require('./freeCodeCamp/fcctesting.js');
const pug = require('pug');
const app = express();
const session = require('express-session');
const passport = require('passport');
const ObjectID = require('mongodb').ObjectID; // use with deserializeUser
const LocalStrategy = require('passport-local');

// Set up persistent connection to db
const mongo = require('mongodb').MongoClient;

mongo.connect(process.env.DATABASE, (err, db) => {
    if(err) {
        console.log('Database error: ' + err);
    } else {
      console.log('Successful database connection');
      
      // Serialize the user authentication object (generates a key)
      passport.serializeUser((user, done) => {
        done(null, user._id); // use _id. It's uniquely generated by MongoDB
      });
      
      // Deserialize authentication object (convert key back to object)
      passport.deserializeUser((id, done) => {
        db.collection('users').findOne(
            {_id: new ObjectID(id)},
            (err, doc) => {
              done(null, doc);
            }
        );
      });

      // tell passport to use an instantiated LocalStartegy object for authentication
      passport.use(
        new LocalStrategy(
          (username, password, done) => {
            db.collection('users').findOne({ username: username }, (err, user) => {
              console.log('User '+ username +' attempted to log in.');
              if (err) return done(err);
              if (!user) return done(null, false); 
              if (password !== user.password) return done(null, false); 
              return done(null, user); // successful login
            });
          }
      ));
      
}});

fccTesting(app); //For FCC testing purposes

//middlewares
app.use('/public', express.static(process.cwd() + '/public'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// use passport initialize and session
app.use(passport.initialize());
app.use(passport.session());

// set up express-session
app.use(session({
  secret: process.env.SESSION_SECRET,
  resave: true,
  saveUninitialized: true,
}));

// set up a template engine
app.set('view engine','pug');

// login route
app.route('/login')
  .post(passport.authenticate('local', { failureRedirect: '/' }), (req, res) => {
    res.redirect('/profile');
  });

// show pug index
app.route('/')
.get((req, res) => {
  res.render(process.cwd() + '/views/pug/index', 
    {
      title: 'Home Page',  
      message: 'Please login',
      showLogin: true
    });
});

// show pug profile page
app.route('/profile')
  .get(ensureAuthenticated, (req, res) => {
    res.render(process.cwd() + '/views/pug/profile',
      { username: req.user.username } // pass these variables to the view
    );
});

// log the user out
app.route('/logout')
  .get((req, res) => {
    req.logout();
    res.redirect('/');
});

// Middleware for 404s
app.use((req, res, next) => {
  res.status(404)
    .type('text')
    .send('Not Found');
});

app.listen(process.env.PORT || 3000, () => {
  console.log("Listening on port " + process.env.PORT);
});

// middleware for ensuring a user is authenticated
// so they can't just go to /profile, they have to log in
function ensureAuthenticated(req, res, next) {
  if (req.isAuthenticated()) {
    return next;
  }
  
  return res.redirect('/');
}